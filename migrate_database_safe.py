"""
Script de migration de donn√©es S√âCURIS√â pour la nouvelle structure de base de donn√©es
Pr√©serve les donn√©es existantes et les convertit vers la nouvelle structure
"""

from backend.app import app, db
from backend.models.case import JurisprudenceCase
from backend.models.user import User
from backend.utils.encryption import encryption_service
from sqlalchemy import text
from datetime import datetime
import json

def backup_existing_data():
    """Sauvegarde les donn√©es existantes avant la migration"""
    with app.app_context():
        try:
            result = db.session.execute(text("""
                SELECT * FROM jurisprudence_cases
            """))
            
            columns = result.keys()
            data = []
            for row in result:
                data.append(dict(zip(columns, row)))
            
            with open('backup_jurisprudence_cases.json', 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2, default=str)
            
            print(f"‚úÖ Sauvegarde de {len(data)} cas dans backup_jurisprudence_cases.json")
            return data
            
        except Exception as e:
            print(f"‚ÑπÔ∏è  Aucune donn√©e existante √† sauvegarder: {str(e)}")
            return []

def migrate_database_safe():
    """
    Migre la base de donn√©es de l'ancienne structure vers la nouvelle
    en pr√©servant les donn√©es existantes
    """
    with app.app_context():
        print("üîÑ D√©but de la migration S√âCURIS√âE de la base de donn√©es...")
        
        try:
            print("\nüì¶ √âtape 1: Sauvegarde des donn√©es existantes...")
            old_data = backup_existing_data()
            
            print("\nüî® √âtape 2: Modification de la structure de la table...")
            
            table_exists = db.session.execute(text("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'jurisprudence_cases'
                )
            """)).scalar()
            
            if table_exists:
                print("  üìã Table existante d√©tect√©e - ajout des nouveaux champs...")
                
                existing_columns = db.session.execute(text("""
                    SELECT column_name 
                    FROM information_schema.columns 
                    WHERE table_name = 'jurisprudence_cases'
                """)).fetchall()
                existing_column_names = [col[0] for col in existing_columns]
                
                new_columns = [
                    ("ref", "VARCHAR(50)"),
                    ("juridiction", "VARCHAR(200)"),
                    ("pays_ville", "VARCHAR(200)"),
                    ("numero_decision", "VARCHAR(100)"),
                    ("numero_dossier", "VARCHAR(100)"),
                    ("type_decision", "VARCHAR(100)"),
                    ("chambre", "VARCHAR(100)"),
                    ("theme", "TEXT"),
                    ("base_legale", "TEXT"),
                    ("source", "VARCHAR(200)"),
                    ("resume_francais_encrypted", "TEXT"),
                    ("resume_arabe_encrypted", "TEXT"),
                    ("texte_integral_encrypted", "TEXT"),
                    ("pdf_file_path", "VARCHAR(500)"),
                    ("updated_at", "TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
                ]
                
                for col_name, col_type in new_columns:
                    if col_name not in existing_column_names:
                        try:
                            db.session.execute(text(f"""
                                ALTER TABLE jurisprudence_cases 
                                ADD COLUMN {col_name} {col_type}
                            """))
                            print(f"  ‚úÖ Colonne {col_name} ajout√©e")
                        except Exception as e:
                            print(f"  ‚ö†Ô∏è  {col_name}: {str(e)}")
                
                print("\nüîÑ √âtape 3: Migration des donn√©es existantes...")
                
                if 'case_number' in existing_column_names:
                    db.session.execute(text("""
                        UPDATE jurisprudence_cases 
                        SET ref = case_number 
                        WHERE ref IS NULL AND case_number IS NOT NULL
                    """))
                    print("  ‚úÖ Donn√©es case_number ‚Üí ref migr√©es")
                
                if 'title' in existing_column_names:
                    db.session.execute(text("""
                        UPDATE jurisprudence_cases 
                        SET titre = title 
                        WHERE titre IS NULL AND title IS NOT NULL
                    """))
                    print("  ‚úÖ Donn√©es title ‚Üí titre migr√©es")
                
                if 'court' in existing_column_names:
                    db.session.execute(text("""
                        UPDATE jurisprudence_cases 
                        SET juridiction = court 
                        WHERE juridiction IS NULL AND court IS NOT NULL
                    """))
                    print("  ‚úÖ Donn√©es court ‚Üí juridiction migr√©es")
                
                if 'category' in existing_column_names:
                    db.session.execute(text("""
                        UPDATE jurisprudence_cases 
                        SET theme = category 
                        WHERE theme IS NULL AND category IS NOT NULL
                    """))
                    print("  ‚úÖ Donn√©es category ‚Üí theme migr√©es")
                
                if 'keywords' in existing_column_names:
                    db.session.execute(text("""
                        UPDATE jurisprudence_cases 
                        SET mots_cles = keywords 
                        WHERE mots_cles IS NULL AND keywords IS NOT NULL
                    """))
                    print("  ‚úÖ Donn√©es keywords ‚Üí mots_cles migr√©es")
                
                if 'description_encrypted' in existing_column_names:
                    db.session.execute(text("""
                        UPDATE jurisprudence_cases 
                        SET resume_francais_encrypted = description_encrypted 
                        WHERE resume_francais_encrypted IS NULL AND description_encrypted IS NOT NULL
                    """))
                    print("  ‚úÖ Donn√©es description ‚Üí r√©sum√© fran√ßais migr√©es")
                
                if 'decision_encrypted' in existing_column_names:
                    db.session.execute(text("""
                        UPDATE jurisprudence_cases 
                        SET texte_integral_encrypted = decision_encrypted 
                        WHERE texte_integral_encrypted IS NULL AND decision_encrypted IS NOT NULL
                    """))
                    print("  ‚úÖ Donn√©es decision ‚Üí texte int√©gral migr√©es")
                
                db.session.commit()
                print("\n  ‚úÖ Migration des donn√©es termin√©e")
                
            else:
                print("  üìã Nouvelle table - cr√©ation de la structure compl√®te...")
                db.create_all()
                print("  ‚úÖ Structure cr√©√©e")
            
            print("\nüìä √âtape 4: V√©rification de la structure finale:")
            result = db.session.execute(text("""
                SELECT column_name, data_type 
                FROM information_schema.columns 
                WHERE table_name = 'jurisprudence_cases'
                ORDER BY ordinal_position
            """))
            
            print("\nColonnes de la table jurisprudence_cases:")
            for row in result:
                print(f"  - {row[0]}: {row[1]}")
            
            case_count = db.session.execute(text("SELECT COUNT(*) FROM jurisprudence_cases")).scalar()
            print(f"\nüìà Total de cas dans la base: {case_count}")
            
            print("\n‚úÖ Migration S√âCURIS√âE termin√©e avec succ√®s!")
            print("\nüìù Prochaines √©tapes:")
            print("  1. V√©rifier les donn√©es migr√©es")
            print("  2. Utiliser l'importation en masse pour les nouveaux PDFs")
            print("  3. Ajouter manuellement les nouveaux champs manquants si n√©cessaire")
            print(f"\nüíæ Sauvegarde disponible dans: backup_jurisprudence_cases.json")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la migration: {str(e)}")
            db.session.rollback()
            print("\n‚ö†Ô∏è  Les donn√©es n'ont pas √©t√© modifi√©es gr√¢ce au rollback")
            raise

if __name__ == '__main__':
    migrate_database_safe()
